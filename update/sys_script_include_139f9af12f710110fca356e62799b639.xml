<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_58872_needit.NeedItUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Utils Script Include for the NeedIt application.&#13;
</description>
        <name>NeedItUtils</name>
        <script><![CDATA[var NeedItUtils = Class.create();
NeedItUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    isDatePast: function(strDate) {
        // Create GlideDateTime objects for the current date and the passed in date
        var rightnow = new GlideCalendarDateTime();
        var testdate = new GlideCalendarDateTime(strDate);

        // If the testdate is before rightnow, return true, else return false
        if (testdate.before(rightnow)) {
            return true;
        } else {
            return false;
        }
    },

    isEnoughTime: function(strDate, leadTime) {
        // minDatetime stores the minimum accepted Datetime (1 day ahead)
        var minDatetime = new GlideCalendarDateTime();
        minDatetime.addSeconds(leadTime * 3600);
        // Create a GlideDateTime object for the When needed date
        var whenNeeded = new GlideCalendarDateTime(strDate);

        // If the When needed date is before minDatetime, do not write the record to the database
        // Output an error message to the screen

        if (whenNeeded.before(minDatetime)) {
            return false;
        } else {
            return true;
        }
    },

    getLeadTime: function(request_type, lt_type) {
        var paramRecord = new GlideRecord("x_58872_needit_needitparams");
        paramRecord.addQuery('request_type', '=', request_type);
        paramRecord.query();

        if (paramRecord.next()) {
            if (lt_type == 'min') {
                return paramRecord.needit_min_lead_time_hours + 0;
            } else {
                return paramRecord.needit_suggested_lead_time_hours + 0;
            }

        } else {

            var paramRecordOther = new GlideRecord("x_58872_needit_needitparams");
            paramRecordOther.addQuery('request_type', '=', 'other');
            paramRecordOther.query();
            if (paramRecordOther.next()) {
                if (lt_type == 'min') {
                    return paramRecordOther.needit_min_lead_time_hours + 0;
                } else {
                    return paramRecordOther.needit_suggested_lead_time_hours + 0;
                }
            } else {
                return 40;
            }
        }
    },
    getRequestType: function() {
        return current.u_request_type.getChoiceValue() + '';
    },
    type: 'NeedItUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-21 17:40:52</sys_created_on>
        <sys_id>139f9af12f710110fca356e62799b639</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>NeedItUtils</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_139f9af12f710110fca356e62799b639</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-21 19:48:25</sys_updated_on>
    </sys_script_include>
</record_update>
